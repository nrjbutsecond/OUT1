// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================
// User & Authentication
// ============================================

enum UserRole {
  USER
  PARTNER
  MENTOR
  ADMIN
}

enum CurrentRole {
  STUDENT
  UNIVERSITY_STUDENT
  TEACHER
  EMPLOYEE
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String?
  name          String
  phone         String
  currentRole   CurrentRole
  organization  String
  roleAtOrg     String
  role          UserRole     @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  accounts              Account[]
  sessions              Session[]
  organizationsCreated  Organization[]        @relation("OrganizationCreator")
  organizationMembers   OrganizationMember[]
  servicePurchases      ServicePurchase[]
  eventTickets          EventTicket[]
  cartItems             CartItem[]
  orders                Order[]
  workspacesOwned       Workspace[]           @relation("WorkspaceOwner")
  workspaceTasks        WorkspaceTask[]       @relation("TaskAssignee")
  workspaceFilesUploaded WorkspaceFile[]      @relation("FileUploader")
  mentorSchedules       MentorSchedule[]
  mentorSessionsAsMentor MentorSession[]      @relation("MentorSessions")
  mentorSessionsAsStudent MentorSession[]     @relation("StudentSessions")
  learningProgress      LearningProgress[]
  pageViews             PageView[]
  notifications         Notification[]
  calendarEvents        CalendarEvent[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// Organization
// ============================================

enum OrganizationType {
  VIP
  STANDARD
  SPONSOR
}

model Organization {
  id          String           @id @default(cuid())
  name        String           @unique
  type        OrganizationType @default(STANDARD)
  logo        String?
  description String?
  bio         String?          // Rich text for organization bio page
  commission  Float            @default(3) // 1% for VIP, 3% for STANDARD
  approved    Boolean          @default(false)
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  creator             User                 @relation("OrganizationCreator", fields: [createdBy], references: [id])
  members             OrganizationMember[]
  services            Service[]
  events              Event[]
  products            Product[]
  workspaces          Workspace[]
  pageViews           PageView[]

  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   @default("member")
  approved       Boolean  @default(false)
  joinedAt       DateTime @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

// ============================================
// Services & Commerce
// ============================================

model Service {
  id             String    @id @default(cuid())
  name           String
  description    String
  price          Float
  category       String
  features       String    // JSON array of features
  organizationId String?   // NULL for TON-owned services
  approved       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization     Organization?      @relation(fields: [organizationId], references: [id])
  purchases        ServicePurchase[]
  learningProgress LearningProgress[]
  mentorSessions   MentorSession[]

  @@map("services")
}

model ServicePurchase {
  id          String   @id @default(cuid())
  userId      String
  serviceId   String
  status      String   @default("active") // active, completed, cancelled
  workspaceId String?
  purchasedAt DateTime @default(now())

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service    @relation(fields: [serviceId], references: [id])
  workspace Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("service_purchases")
}

enum EventType {
  TEDX
  WORKSHOP
}

model Event {
  id             String    @id @default(cuid())
  name           String
  description    String
  date           DateTime
  location       String
  latitude       Float?
  longitude      Float?
  ticketPrice    Float
  organizationId String?   // NULL for TON events
  approved       Boolean   @default(false)
  type           EventType @default(TEDX)
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])
  tickets      EventTicket[]
  orderItems   OrderItem[]

  @@map("events")
}

model EventTicket {
  id            String   @id @default(cuid())
  userId        String
  eventId       String
  qrCode        String   @unique
  paymentStatus String   @default("pending") // pending, paid, cancelled
  purchasedAt   DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id])

  @@map("event_tickets")
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String
  price          Float
  images         String   // JSON array of image URLs
  organizationId String?  // NULL for TON products
  approved       Boolean  @default(false)
  stock          Int      @default(0)
  category       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])
  cartItems    CartItem[]
  orderItems   OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

enum OrderType {
  TICKET
  MERCHANDISE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  total           Float
  shippingAddress String?     // JSON with address details
  status          OrderStatus @default(PENDING)
  type            OrderType
  discountCodeId  String?
  discountAmount  Float?      // Amount saved from discount
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  discountCode DiscountCode? @relation("DiscountCode", fields: [discountCodeId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String?
  eventId   String?
  quantity  Int
  price     Float

  // Relations
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  event   Event?   @relation(fields: [eventId], references: [id])

  @@map("order_items")
}

// ============================================
// Workspace & Collaboration
// ============================================

enum WorkspaceType {
  SERVICE
  ORGANIZATION
}

model Workspace {
  id             String        @id @default(cuid())
  name           String
  type           WorkspaceType
  ownerId        String
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  owner            User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  pages            WorkspacePage[]
  tasks            WorkspaceTask[]
  files            WorkspaceFile[]
  servicePurchases ServicePurchase[]

  @@map("workspaces")
}

model WorkspacePage {
  id          String   @id @default(cuid())
  workspaceId String
  title       String
  content     String   // Rich text JSON from Tiptap
  parentId    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent    WorkspacePage?  @relation("PageHierarchy", fields: [parentId], references: [id])
  children  WorkspacePage[] @relation("PageHierarchy")

  @@map("workspace_pages")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model WorkspaceTask {
  id          String     @id @default(cuid())
  workspaceId String
  title       String
  description String?
  assigneeId  String?
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  assignee  User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])

  @@map("workspace_tasks")
}

model WorkspaceFile {
  id          String   @id @default(cuid())
  workspaceId String
  name        String
  url         String
  size        Int?
  mimeType    String?
  uploadedBy  String
  uploadedAt  DateTime @default(now())

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  uploader  User      @relation("FileUploader", fields: [uploadedBy], references: [id])

  @@map("workspace_files")
}

// ============================================
// Mentor & Learning
// ============================================

model MentorSchedule {
  id        String   @id @default(cuid())
  mentorId  String
  date      DateTime
  startTime String
  endTime   String
  available Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  mentor User @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@map("mentor_schedules")
}

model MentorSession {
  id        String   @id @default(cuid())
  mentorId  String
  studentId String
  serviceId String?
  date      DateTime
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  mentor  User     @relation("MentorSessions", fields: [mentorId], references: [id])
  student User     @relation("StudentSessions", fields: [studentId], references: [id])
  service Service? @relation(fields: [serviceId], references: [id])

  @@map("mentor_sessions")
}

model LearningProgress {
  id                String   @id @default(cuid())
  userId            String
  serviceId         String
  completionPercent Int      @default(0)
  materials         String?  // JSON array of learning materials
  lastAccessedAt    DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])

  @@unique([userId, serviceId])
  @@map("learning_progress")
}

// ============================================
// Analytics & Activity
// ============================================

model PageView {
  id             String    @id @default(cuid())
  userId         String?
  page           String
  organizationId String?
  timestamp      DateTime  @default(now())

  // Relations
  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("page_views")
}

enum NotificationType {
  ORDER
  EVENT
  ORGANIZATION
  SYSTEM
  MENTOR
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  content   String
  read      Boolean          @default(false)
  relatedId String?
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum CalendarEventType {
  EVENT
  DEADLINE
  SESSION
  MEETING
  REMINDER
}

model CalendarEvent {
  id        String            @id @default(cuid())
  userId    String
  title     String
  date      DateTime
  endDate   DateTime?
  type      CalendarEventType
  relatedId String?
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model DiscountCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  type        DiscountType
  value       Float    // Percentage or fixed amount
  minAmount   Float?   // Minimum order amount
  maxUses     Int?     // Maximum number of uses
  usedCount   Int      @default(0)
  isActive    Boolean  @default(true)
  validFrom   DateTime @default(now())
  validUntil  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders Order[] @relation("DiscountCode")

  @@map("discount_codes")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
